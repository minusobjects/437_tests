
const getCoordsForDegrees = (degrees, radius, centerX, centerY) => {
  const radians = degrees * (Math.PI/180);
  const x = radius * Math.cos(radians) + centerX;
  const y = radius * Math.sin(radians) + centerY;
  return [x, y];
}

const getAllCoords = (amounts, radius, centerCoords) => {
  const total = amounts.reduce((accum, val) => accum + val);
  const degreePoints = []
  let n = 0;
  amounts.forEach((amt) => {
    n += amt;
    degreePoints.push((n / total) * 360);
  });
  degreePoints.pop();
  return degreePoints.map(point => (getCoordsForDegrees(point, radius, centerCoords[0], centerCoords[1])));
}

const generatePathString = (startCoords, endCoords, centerCoords, radius, isMoreThanHalf) => {
  // I think maybe if the amount is more than half we want 1 1, otherwise it's 0 1
  const sweepFlags = isMoreThanHalf ? '1 1' : '0 1';
  return `M ${startCoords[0]} ${startCoords[1]} A ${radius} ${radius} 0 ${sweepFlags} ${endCoords[0]} ${endCoords[1]} L ${centerCoords[0]} ${centerCoords[1]} Z`;
}

const getAllPathStrings = (amounts, allCoords, centerCoords, radius) => {
  const zeroCoords = [radius * 2, radius];
  const total = amounts.reduce((accum, val) => accum + val);
  const result = [];
  let startCoords;
  let endCoords;
  let isMoreThanHalf;
  for (let i = 0; i <= allCoords.length; i++) {
    if (i == 0) {
      startCoords = zeroCoords;
      endCoords = allCoords[0];
    } else if (i == allCoords.length) {
      startCoords = allCoords[i - 1];
      endCoords = zeroCoords;
    } else {
      startCoords = allCoords[i - 1];
      endCoords = allCoords[i];
    }
    isMoreThanHalf = amounts[i] > (total/2);
    result.push(generatePathString(startCoords, endCoords, centerCoords, radius, isMoreThanHalf));
  }
  return result;
};

const generateSvg = (pathStrings, colors, background, width, height, cx, cy, rx, ry) => {
  const svgns = 'http://www.w3.org/2000/svg';
  const newSvg = document.createElementNS(svgns, 'svg');
  newSvg.setAttribute('style', `background: ${background}`);
  newSvg.setAttribute('width', width);
  newSvg.setAttribute('height', height);
  newSvg.setAttribute('stroke', 'none');
  for (let i = 0; i < pathStrings.length; i++) {
    const newPath = document.createElementNS(svgns, 'path');
    newPath.setAttribute('d', pathStrings[i]);
    newPath.setAttribute('fill', colors[i]);
    newSvg.appendChild(newPath);
  }
  const newEllipse = document.createElementNS(svgns, 'ellipse');
  newEllipse.setAttribute('cx', cx);
  newEllipse.setAttribute('cy', cy);
  newEllipse.setAttribute('rx', rx);
  newEllipse.setAttribute('ry', ry);
  newEllipse.setAttribute('fill', background);
  newSvg.appendChild(newEllipse);
  return newSvg;
}

let amounts = [50, 12, 4];

let radius = 45;
let centerCoords = [50, 50];
// let zeroCoords = [95, 50];

let allCoords = getAllCoords(amounts, radius, centerCoords);

let pathStrings = getAllPathStrings(amounts, allCoords, centerCoords, radius);

let colors = ["red", "green", "blue"];
let background = 'orange';
let width = 100;
let height = 100;
let cx = 50;
let cy = 50;
let rx = 30;
let ry = 30;

let svg1 = generateSvg(pathStrings, colors, background, width, height, cx, cy, rx, ry);



amounts = [8, 23, 16, 3];

radius = 100;
centerCoords = [100, 100];
// zeroCoords = [radius * 2, radius]
// zeroCoords = [200, 100];

allCoords = getAllCoords(amounts, radius, centerCoords);

pathStrings = getAllPathStrings(amounts, allCoords, centerCoords, radius);

colors = ["pink", "yellow", "turquoise", "orange"];
background = 'gold';
width = 200;
height = 200;
cx = 100;
cy = 100;
rx = 70;
ry = 70;

let svg2 = generateSvg(pathStrings, colors, background, width, height, cx, cy, rx, ry);



------


50, 12, 4

// (divide each by total, then multiply that by 360)

273.6
64.8
21.599999999999998

// run function on each

[52.825573378819115, 5.088797220727777]
[69.16006812042826, 90.71721736097088]
[91.83994186497131, 66.56560487081052]

// oh wait, i think the degrees need to be cumulative

273.6
273.6 + 64.8 = 338.4
end with 360

[52.825573378819115, 5.088797220727777]
[91.83994186497131, 33.434395129189454]
[95, 50]

